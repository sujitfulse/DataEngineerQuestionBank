1) Palindrome - 
def isPalindrome(num:Int):Boolean={
	var tempNum = num
	var newNum=0
	while (tempNum>0){
		val lastDigit = tempNum % 10
		newNum = newNum*10 + lastDigit
		tempNum = tempNum / 10
	}
	if(newNum==num) return true
	else return false
}
isPalindrome(121)
-------------------------------------------------------------------------------------------
2) Prime no -
def isPrime(num: Int):Boolean={
	for (i<-2 to num/2 by 1){
		if(num%i==0){
			return false;
		}
	}
	return true;
}
----------------------------------------------------------------------------------------------
3) Armstrong no  => 153 ==> 1^3 + 5^3 + 3^3 = 153. ( sum of pow(digit,no_of_digits) == original number)

def isArmstrong(num:Int):Boolean={
	var tempNum = num
	var digits = 0
// find no of digits into number 
	while(tempNum>0){
		tempNum = tempNum/10
		digits=digits+1
	}

	var tempNum1= num
	var sum=0.0
	while(tempNum1>0){
		val rem = tempNum1%10
		sum= sum + pow(rem,digits)
		tempNum1=tempNum1/10	
	}
	if(sum==num) return true
	else return false
}
----------------------------------------------------------------------------------------------
4) Factorial with recursion without recursion

// without recursion
def factorial(n: Int): Int = {      
        var f = 1
        for(i <- 1 to n)
        {
            f = f * i;
        }
        return f
    }

// with recursion
 def factorial(n: Int): Int =
    {
        if (n == 0) 
            return 1
        else
            return n * factorial(n-1)
    }

----------------------------------------------------------------------------------------------
5) Fibonneci series 
def fib(num:Int)={
	var first_element=0
	var second_element=1
	var sum=0
	if(num==2){print("0,1")}
	else{
		print("0,1")
		for(i<-1 to num-2 by 1){
			sum = first_element+second_element
			first_element=second_element
			second_element=sum
			print(","+sum)
		}
	}
}
fib(5)
----------------------------------------------------------------------------------------------
6) Sorting without using inbuilt sort function
// using bubble sort
import scala.collection.mutable.ListBuffer

object HelloWorld {

     def bubbleSort(source:ListBuffer[Int]) = {
    for (i <- 0 until source.length - 1; j <- 0 until source.length - 1 - i) {
      if (source(j) > source(j + 1)) {
         val temp = source(j)
         source(j) = source(j + 1)
         source(j + 1) = temp
      }
    }
    source
   }

    def main(args: Array[String]) { 
       var list :ListBuffer[Int] =  ListBuffer(4,1,5,2,5)
     println(bubbleSort(list))
    }
}

----------------------------------------------------------------------------------------------
7) Sum of array elements 

 	 // create an array
        var OurArray = Array(10,20,30,40,50)
        // create a counter
        var counter = 0;
        // create default sum
        var sum = 0;
	// create a while loop
        while(counter<OurArray.size) // check if counter is less than array size
        {
            // add element value to sum
            sum = sum + OurArray(counter)
            counter = counter + 1
        }        
--------------------------------------------------------------------------
8) Sum of diagonal elements of matrix ==>
var arr : Array[Array[Int]] = Array.ofDim[Int](3,3)
arr(0)= Array(1,2,3)
arr(1)=	Array(5,6,7)
arr(2)= Array(8,9,10)

for(i<-0 to 2 by 1){
	for(j<-0 to 2 by 1){
		print(arr(i)(j)+"\t")
	}
	print("\n")
}
var sum = 0
for(i<-0 to 2 by 1){
	for(j<-0 to 2 by 1){
		if(i==j){
			sum=sum+arr(i)(j)
		}
	}
}
print("Sum=>"+sum)
---------------------------------------------------------------------------
9) Given an array find sum of two max elements
10) Sorting of data  using high order function
11) binary search 
12 sum of odd numbers in array 
13) scala partitial function, scala function currying, scala higher order function 

--------------Latest coding question---------------------------------------------------------

7.
Input: 
Score    Number 
90    2
60    3
70    5
80    1

Output:
Score     Total Number 
90    2
80    3
70    8
60    11

val w =Window.orderBy($"Range".desc)
val df2=df.withColumn("new",sum("Number").over(w))
------------------------------------------------------------------------------------------------------------
10. 
Input:
aaaabbbbccdddaaadddee
Output:
abcdade

object Main extends App {
var prefix2 = "aaaaaabaabccccccc" 
var temp=""
 var result=""
 for(c<-prefix2)             
    {
     if(!temp.toString().equals(c.toString()))
      {
      result=result+c.toString()
       temp=c.toString();
      }}
System.out.println("final result is " +result);
}
------------------------------------------------------------------------------------------------------------
11.
Input:
Day,Merchant_name,Amount,Transaction_mode
------------------------------------------
2022-07-29,merchent_1,150,CASH
2022-07-29,merchent_1,500,ONLINE
2022-07-30,merchent_2,450,ONLINE
2022-07-30,merchent_1,100,CASH
2022-07-30,merchent_3,600,CASH
2022-08-01,merchent_5,200,ONLINE
2022-08-01,merchent_2,100,ONLINE

Output:
Merchant,Cash_Amount,Online_Amount
----------------------------------
merchent_1,250,500
merchent_2,0,550
merchent_3,600,0
merchent_5,0,200

select merchant, 
sum(case when payment_mode='CASH' then amount else 0 end) as cash_amount,
sum(case when payment_mode='ONLINE' then amount else 0 end) as online_amount 
from payments_data group by merchant
------------------------------------------------------------------------------------------------------------

13.
Input - 
+--------+-------+-------+
| Product|Ammount|Country|
+--------+-------+-------+
|  banana|   1000|    usa|
|carrots1|    500|    usa|
|   beans|   1600|    usa|
|  orange|   2000|    usa|
|  orange|   2000|    usa|
|  banana|    400|  china|
| carrots|   1200|  china|
|   beans|   1500|  china|
|  orange|   4000|  china|
|  banana|   2000| canada|
| carrots|   2000| canada|
|   beans|   2000| mexico|
+--------+-------+-------+

Output -
+--------+------+-----+------+----+                                             
| Product|canada|china|mexico| usa|
+--------+------+-----+------+----+
|  orange|  null| 4000|  null|4000|
|carrots1|  null| null|  null| 500|
|   beans|  null| 1500|  2000|1600|
|  banana|  2000|  400|  null|1000|
| carrots|  2000| 1200|  null|null|
+--------+------+-----+------+----+

SELECT * FROM demo_table  
PIVOT
(SUM(Ammount) FOR Country IN (canada,china, 
mexico, usa)) AS PivotTable;
------------------------------------------------------------------------------------------------------------
14.
Input
+------+-----+
|acc_no|score|
+------+-----+
|    A1|  600|
|    A2|  600|
|    B1|  700|
|    B2|  700|
|    B3|  700|
|    C1|  800|
|    C2|  800|
+------+-----+

input2
+-----+-------+
|score|balance|
+-----+-------+
|  600|   1000|
|  700|   6000|
|  800|   8000|
+-----+-------+

OutPut -
+------+-------+                                                                
|acc_no|balance|
+------+-------+
|    A1|  500.0|
|    A2|  500.0|
|    B1| 2000.0|
|    B2| 2000.0|
|    B3| 2000.0|
|    C1| 4000.0|
|    C2| 4000.0|
+------+-------+

15.
